// src/work-schedules/work-schedules.service.ts
import { Injectable, NotFoundException, BadRequestException } from '@nestjs/common';
import { CreateWorkScheduleDto } from './dto/create-work-schedule.dto';
import { UpdateWorkScheduleDto } from './dto/update-work-schedule.dto';
import { WorkSchedule, Task } from './entities/work-schedule.entity';

// üîî –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞
@Injectable()
export class NotificationsService {
  private notifications: any[] = [];

  createNotification(userId: number, message: string, type: string, relatedId: number) {
    const notification = {
      id: Date.now(),
      userId,
      message,
      type,
      relatedId,
      read: false,
      createdAt: new Date()
    };
    
    this.notifications.push(notification);
    console.log(`üîî –°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${message} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    return notification;
  }

  getUnreadNotifications(userId: number) {
    return this.notifications.filter(notif => 
      notif.userId === userId && !notif.read
    );
  }

  markAsRead(notificationId: number) {
    const notification = this.notifications.find(n => n.id === notificationId);
    if (notification) {
      notification.read = true;
    }
  }

  getAllUserNotifications(userId: number) {
    return this.notifications.filter(notif => notif.userId === userId)
      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());
  }

  markAllAsRead(userId: number) {
    this.notifications.forEach(notif => {
      if (notif.userId === userId && !notif.read) {
        notif.read = true;
      }
    });
  }
}

@Injectable()
export class WorkSchedulesService {
  private workSchedules: WorkSchedule[] = [];
  private idCounter = 1;
  private taskIdCounter = 1;

  // üîî –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏
  private readonly notificationsService = new NotificationsService();

  // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
  private validateDependencies(tasks: Task[], scheduleId?: number): void {
    const taskIds = tasks.map(task => task.id);
    
    for (const task of tasks) {
      for (const depId of task.dependencies) {
        if (!taskIds.includes(depId)) {
          throw new BadRequestException(
            `–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Å ID ${depId} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–º –≥—Ä–∞—Ñ–∏–∫–µ`
          );
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if (this.hasCircularDependency(tasks, task.id, depId)) {
          throw new BadRequestException(
            `–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏ ${task.id} –∏ ${depId}`
          );
        }
      }
    }
  }

  private hasCircularDependency(tasks: Task[], taskId: number, depId: number, visited: Set<number> = new Set()): boolean {
    if (taskId === depId) return true;
    if (visited.has(depId)) return false;
    
    visited.add(depId);
    const dependency = tasks.find(t => t.id === depId);
    
    if (!dependency) return false;
    
    for (const nextDepId of dependency.dependencies) {
      if (this.hasCircularDependency(tasks, taskId, nextDepId, visited)) {
        return true;
      }
    }
    
    return false;
  }

  // üìÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–¢
  private validateTaskDates(tasks: Task[]): void {
    for (const task of tasks) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
      if (task.endDate <= task.startDate) {
        throw new BadRequestException(
          `–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ "${task.name}" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞`
        );
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–∞—Ç–∞–º
      const calculatedDuration = Math.ceil(
        (task.endDate.getTime() - task.startDate.getTime()) / (1000 * 60 * 60 * 24)
      );
      
      if (calculatedDuration !== task.duration) {
        throw new BadRequestException(
          `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏ "${task.name}" –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–∞—Ç–∞–º –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è`
        );
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ –¥–∞—Ç–∞–º
    this.validateDependencyDates(tasks);
  }

  private validateDependencyDates(tasks: Task[]): void {
    for (const task of tasks) {
      for (const depId of task.dependencies) {
        const dependency = tasks.find(t => t.id === depId);
        if (dependency && task.startDate < dependency.endDate) {
          throw new BadRequestException(
            `–ó–∞–¥–∞—á–∞ "${task.name}" –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Ä–∞–Ω—å—à–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ "${dependency.name}"`
          );
        }
      }
    }
  }

  // üìä –î–ê–ù–ù–´–ï –î–õ–Ø –î–ò–ê–ì–†–ê–ú–ú–´ –ì–ê–ù–¢–ê
  getGanttData(scheduleId: number): any {
    const schedule = this.findOne(scheduleId);
    
    const ganttData = {
      scheduleId: schedule.id,
      scheduleName: schedule.name,
      status: schedule.status,
      tasks: schedule.tasks.map(task => ({
        id: task.id,
        name: task.name,
        start: task.startDate,
        end: task.endDate,
        progress: task.progress,
        dependencies: task.dependencies.map(depId => depId.toString()),
        status: task.status,
        assignedTo: task.assignedTo,
        duration: task.duration,
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        custom_class: task.status === 'completed' ? 'completed-task' : 
                     task.status === 'in_progress' ? 'in-progress-task' : 'not-started-task'
      })),
      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
      calendar: {
        minDate: this.getMinDate(schedule.tasks),
        maxDate: this.getMaxDate(schedule.tasks)
      }
    };
    
    return ganttData;
  }

  private getMinDate(tasks: Task[]): Date {
    if (tasks.length === 0) return new Date();
    return new Date(Math.min(...tasks.map(task => task.startDate.getTime())));
  }

  private getMaxDate(tasks: Task[]): Date {
    if (tasks.length === 0) return new Date();
    return new Date(Math.max(...tasks.map(task => task.endDate.getTime())));
  }

  // üéØ –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –° –í–ê–õ–ò–î–ê–¶–ò–ï–ô
  create(createWorkScheduleDto: CreateWorkScheduleDto): WorkSchedule {
    const tasks: Task[] = createWorkScheduleDto.tasks.map(task => ({
      id: this.taskIdCounter++,
      name: task.name,
      startDate: new Date(task.startDate),
      endDate: new Date(task.endDate),
      duration: task.duration,
      dependencies: task.dependencies || [],
      assignedTo: task.assignedTo,
      progress: 0,
      status: 'not_started',
    }));

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç
    this.validateTaskDates(tasks);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    this.validateDependencies(tasks);

    const newSchedule: WorkSchedule = {
      id: this.idCounter++,
      objectId: createWorkScheduleDto.objectId,
      name: createWorkScheduleDto.name,
      tasks: tasks,
      status: 'draft',
      createdAt: new Date(),
      updatedAt: new Date(),
      createdBy: 1,
    };

    this.workSchedules.push(newSchedule);
    return newSchedule;
  }

  update(id: number, updateWorkScheduleDto: UpdateWorkScheduleDto): WorkSchedule {
    const scheduleIndex = this.workSchedules.findIndex(s => s.id === id);
    if (scheduleIndex === -1) {
      throw new NotFoundException(`Work schedule with ID ${id} not found`);
    }

    // ‚úÖ –ò—Å–∫–ª—é—á–∞–µ–º tasks –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –æ–Ω–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
    const { tasks, ...updateData } = updateWorkScheduleDto;

    this.workSchedules[scheduleIndex] = {
      ...this.workSchedules[scheduleIndex],
      ...updateData,
      updatedAt: new Date(),
    };

    return this.workSchedules[scheduleIndex];
  }

  // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ (–¥–ª—è –ø—Ä–æ—Ä–∞–±–∞)
  proposeChanges(scheduleId: number, proposedTasks: any[]): WorkSchedule {
    const schedule = this.findOne(scheduleId);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∫ —Ç–∏–ø—É Task
    const tasks: Task[] = proposedTasks.map(task => ({
      id: task.id || this.taskIdCounter++,
      name: task.name,
      startDate: new Date(task.startDate),
      endDate: new Date(task.endDate),
      duration: task.duration,
      dependencies: task.dependencies || [],
      assignedTo: task.assignedTo,
      progress: task.progress || 0,
      status: task.status || 'not_started',
    }));

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç
    this.validateTaskDates(tasks);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    this.validateDependencies(tasks);

    schedule.tasks = tasks;
    schedule.status = 'pending_approval';
    schedule.updatedAt = new Date();

    // üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–ª—É–∂–±—ã –∫–æ–Ω—Ç—Ä–æ–ª—è
    this.notificationsService.createNotification(
      schedule.createdBy, // ID —Å–ª—É–∂–±—ã –∫–æ–Ω—Ç—Ä–æ–ª—è
      `–ü—Ä–æ—Ä–∞–± –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥—Ä–∞—Ñ–∏–∫–µ "${schedule.name}"`,
      'schedule_change_proposed',
      scheduleId
    );

    return schedule;
  }

  // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è (–¥–ª—è —Å–ª—É–∂–±—ã –∫–æ–Ω—Ç—Ä–æ–ª—è)
  approveChanges(scheduleId: number, approved: boolean): WorkSchedule {
    const schedule = this.findOne(scheduleId);
    
    if (approved) {
      schedule.status = 'active';
    } else {
      schedule.status = 'draft';
    }

    schedule.updatedAt = new Date();

    // üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ä–∞–±–∞
    const foremanId = schedule.tasks[0]?.assignedTo || 2; // ID –ø—Ä–æ—Ä–∞–±–∞
    this.notificationsService.createNotification(
      foremanId,
      approved ? 
        `–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥—Ä–∞—Ñ–∏–∫–µ "${schedule.name}" —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã` :
        `–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥—Ä–∞—Ñ–∏–∫–µ "${schedule.name}" –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã`,
      approved ? 'schedule_change_approved' : 'schedule_change_rejected',
      scheduleId
    );

    return schedule;
  }

  // üîî –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú–ò
  getUserNotifications(userId: number) {
    return this.notificationsService.getAllUserNotifications(userId);
  }

  getUnreadNotifications(userId: number) {
    return this.notificationsService.getUnreadNotifications(userId);
  }

  markNotificationAsRead(notificationId: number) {
    this.notificationsService.markAsRead(notificationId);
  }

  markAllNotificationsAsRead(userId: number) {
    this.notificationsService.markAllAsRead(userId);
  }

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  findByObjectId(objectId: number): WorkSchedule[] {
    return this.workSchedules.filter(schedule => schedule.objectId === objectId);
  }

  findOne(id: number): WorkSchedule {
    const schedule = this.workSchedules.find(s => s.id === id);
    if (!schedule) {
      throw new NotFoundException(`Work schedule with ID ${id} not found`);
    }
    return schedule;
  }

  remove(id: number): void {
    const scheduleIndex = this.workSchedules.findIndex(s => s.id === id);
    if (scheduleIndex === -1) {
      throw new NotFoundException(`Work schedule with ID ${id} not found`);
    }
    this.workSchedules.splice(scheduleIndex, 1);
  }

  updateTaskProgress(scheduleId: number, taskId: number, progress: number): WorkSchedule {
    const schedule = this.findOne(scheduleId);
    const task = schedule.tasks.find(t => t.id === taskId);
    
    if (!task) {
      throw new NotFoundException(`Task with ID ${taskId} not found`);
    }

    task.progress = Math.max(0, Math.min(100, progress)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å 0-100%
    task.status = progress === 100 ? 'completed' : 
                  progress > 0 ? 'in_progress' : 'not_started';
    
    schedule.updatedAt = new Date();
    return schedule;
  }

  findAll(): WorkSchedule[] {
    return this.workSchedules;
  }
}
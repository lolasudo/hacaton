// src/work-schedules/work-schedules.controller.ts
import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';
import { WorkSchedulesService } from './work-schedules.service';
import { CreateWorkScheduleDto } from './dto/create-work-schedule.dto';
import { UpdateWorkScheduleDto } from './dto/update-work-schedule.dto';
import { ApiTags, ApiOperation } from '@nestjs/swagger';

@ApiTags('work-schedules')
@Controller('work-schedules')
export class WorkSchedulesController {
  constructor(private readonly workSchedulesService: WorkSchedulesService) {}

  @Post()
  @ApiOperation({ summary: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç' })
  create(@Body() createWorkScheduleDto: CreateWorkScheduleDto) {
    return this.workSchedulesService.create(createWorkScheduleDto);
  }

  @Get()
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏' })
  findAll() {
    return this.workSchedulesService.findAll();
  }

  @Get('object/:objectId')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞' })
  findByObjectId(@Param('objectId') objectId: string) {
    return this.workSchedulesService.findByObjectId(+objectId);
  }

  @Get(':id')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–æ ID' })
  findOne(@Param('id') id: string) {
    return this.workSchedulesService.findOne(+id);
  }

  @Get(':id/gantt-data')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã –ì–∞–Ω—Ç–∞' })
  getGanttData(@Param('id') id: string) {
    return this.workSchedulesService.getGanttData(+id);
  }

  @Patch(':id')
  @ApiOperation({ summary: '–û–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫' })
  update(@Param('id') id: string, @Body() updateWorkScheduleDto: UpdateWorkScheduleDto) {
    return this.workSchedulesService.update(+id, updateWorkScheduleDto);
  }

  @Delete(':id')
  @ApiOperation({ summary: '–£–¥–∞–ª–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫' })
  remove(@Param('id') id: string) {
    return this.workSchedulesService.remove(+id);
  }

  // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è workflow —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è

  @Post(':id/propose-changes')
  @ApiOperation({ summary: '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ (–¥–ª—è –ø—Ä–æ—Ä–∞–±–∞)' })
  proposeChanges(@Param('id') id: string, @Body() body: { tasks: any[] }) {
    return this.workSchedulesService.proposeChanges(+id, body.tasks);
  }

  @Post(':id/approve-changes')
  @ApiOperation({ summary: '–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è (–¥–ª—è —Å–ª—É–∂–±—ã –∫–æ–Ω—Ç—Ä–æ–ª—è)' })
  approveChanges(
    @Param('id') id: string, 
    @Body() body: { approved: boolean }
  ) {
    return this.workSchedulesService.approveChanges(+id, body.approved);
  }

  @Patch(':scheduleId/tasks/:taskId/progress')
  @ApiOperation({ summary: '–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á–∏' })
  updateTaskProgress(
    @Param('scheduleId') scheduleId: string,
    @Param('taskId') taskId: string,
    @Body() body: { progress: number }
  ) {
    return this.workSchedulesService.updateTaskProgress(+scheduleId, +taskId, body.progress);
  }

  // üîî –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
  @Get('notifications/user/:userId')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' })
  getUserNotifications(@Param('userId') userId: string) {
    return this.workSchedulesService.getUserNotifications(+userId);
  }

  @Get('notifications/user/:userId/unread')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' })
  getUnreadNotifications(@Param('userId') userId: string) {
    return this.workSchedulesService.getUnreadNotifications(+userId);
  }

  @Patch('notifications/:id/read')
  @ApiOperation({ summary: '–û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ' })
  markNotificationAsRead(@Param('id') id: string) {
    this.workSchedulesService.markNotificationAsRead(+id);
    return { message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ' };
  }

  @Patch('notifications/user/:userId/read-all')
  @ApiOperation({ summary: '–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ' })
  markAllNotificationsAsRead(@Param('userId') userId: string) {
    this.workSchedulesService.markAllNotificationsAsRead(+userId);
    return { message: '–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω—ã' };
  }
}
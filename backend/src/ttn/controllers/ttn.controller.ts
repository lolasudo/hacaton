// src/ttn/controllers/ttn.controller.ts
import {
  Controller,
  Post,
  Get,
  Patch,
  Delete,
  Body,
  UploadedFile,
  UseInterceptors,
  UseGuards,
  Request,
  HttpStatus,
  HttpCode,
  Param,
  Query,
  ParseIntPipe,
  NotFoundException,
} from '@nestjs/common';
import { FileInterceptor } from '@nestjs/platform-express';
import { ApiBearerAuth, ApiTags, ApiOperation, ApiConsumes } from '@nestjs/swagger';
import { AuthGuard } from '@nestjs/passport';
import { RolesGuard } from '../../roles/roles.guard';
import { Roles } from '../../roles/roles.decorator';
import { RoleEnum } from '../../roles/roles.enum';
import { TTNService } from '../services/ttn.service';
import { CreateTTNDto } from '../dto/create-ttn.dto';
import { UpdateTTNDto } from '../dto/update-ttn.dto'; // –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
import { UpdateTTNStatusDto } from '../dto/update-ttn-status.dto'; // –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
import { GetTTNListDto } from '../dto/get-ttn-list.dto';
import { TTN } from '../domain/ttn';

// üî¥ –ò–°–ü–†–ê–í–õ–Ø–ï–ú –†–û–õ–ò - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤ –≤–∞—à–µ–º RoleEnum
const CONTROL_ROLES = [RoleEnum.ADMIN]; // –í—Ä–µ–º–µ–Ω–Ω–æ —Ç–æ–ª—å–∫–æ ADMIN
const CONTRACTOR_ROLES = [RoleEnum.CONTRACTOR, RoleEnum.ADMIN];

@ApiBearerAuth()
@UseGuards(AuthGuard('jwt'), RolesGuard)
@ApiTags('TTN')
@Controller({
  path: 'ttn',
  version: '1',
})
export class TTNController {
  constructor(private readonly ttnService: TTNService) {}

  @Post('upload')
  @Roles(RoleEnum.CONTRACTOR)
  @ApiOperation({ summary: '–ó–∞–≥—Ä—É–∑–∏—Ç—å –¢–¢–ù —Å —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è' })
  @ApiConsumes('multipart/form-data')
  @UseInterceptors(FileInterceptor('file'))
  @HttpCode(HttpStatus.CREATED)
  async uploadTTN(
    @UploadedFile() file: Express.Multer.File,
    @Body() createTTNDto: CreateTTNDto,
    @Request() req,
  ): Promise<TTN> {
    return this.ttnService.processTTN(file, createTTNDto, req.user.id);
  }

  @Get()
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¢–¢–ù —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π' })
  async getTTNList(
    @Query() filters: GetTTNListDto,
    @Request() req,
  ) {
    if (req.user.role === RoleEnum.CONTRACTOR) {
      filters.contractorId = req.user.id;
    }
    
    return this.ttnService.findAll({
      ...filters,
      dateFrom: filters.dateFrom ? new Date(filters.dateFrom) : undefined,
      dateTo: filters.dateTo ? new Date(filters.dateTo) : undefined,
    });
  }

  @Get(':id')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å –¢–¢–ù –ø–æ ID' })
  async getTTNById(
    @Param('id', ParseIntPipe) id: number,
    @Request() req,
  ) {
    const ttn = await this.ttnService.findById(id);
    if (!ttn) {
      throw new NotFoundException(`TTN with id ${id} not found`);
    }

    if (req.user.role === RoleEnum.CONTRACTOR && ttn.contractorId !== req.user.id) {
      throw new NotFoundException(`TTN with id ${id} not found`);
    }

    return ttn;
  }

  @Patch(':id')
  @Roles(...CONTRACTOR_ROLES)
  @ApiOperation({ summary: '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¢–¢–ù' })
  async updateTTN(
    @Param('id', ParseIntPipe) id: number,
    @Body() updateTTNDto: UpdateTTNDto,
    @Request() req,
  ) {
    if (req.user.role === RoleEnum.CONTRACTOR) {
      const ttn = await this.ttnService.findById(id);
      if (!ttn || ttn.contractorId !== req.user.id) {
        throw new NotFoundException(`TTN with id ${id} not found`);
      }
    }
    return this.ttnService.update(id, updateTTNDto);
  }

  @Patch(':id/status')
  @Roles(...CONTROL_ROLES)
  @ApiOperation({ summary: '–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¢–¢–ù' })
  async updateTTNStatus(
    @Param('id', ParseIntPipe) id: number,
    @Body() updateStatusDto: UpdateTTNStatusDto,
    @Request() req,
  ) {
    return this.ttnService.updateStatus(id, updateStatusDto, req.user.id);
  }

  @Get('object/:objectId')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å –¢–¢–ù –ø–æ –æ–±—ä–µ–∫—Ç—É —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞' })
  async getTTNByObject(
    @Param('objectId', ParseIntPipe) objectId: number,
    @Request() req,
  ) {
    if (req.user.role === RoleEnum.CONTRACTOR) {
      const result = await this.ttnService.findAll({
        constructionObjectId: objectId,
        contractorId: req.user.id,
      });
      return result.data;
    }
    return this.ttnService.findByConstructionObjectId(objectId);
  }

  @Delete(':id')
  @Roles(...CONTRACTOR_ROLES)
  @ApiOperation({ summary: '–£–¥–∞–ª–∏—Ç—å –¢–¢–ù' })
  async deleteTTN(
    @Param('id', ParseIntPipe) id: number,
    @Request() req,
  ) {
    if (req.user.role === RoleEnum.CONTRACTOR) {
      const ttn = await this.ttnService.findById(id);
      if (!ttn || ttn.contractorId !== req.user.id) {
        throw new NotFoundException(`TTN with id ${id} not found`);
      }
    }
    return this.ttnService.delete(id);
  }

  @Post(':id/verify')
  @Roles(...CONTROL_ROLES)
  @ApiOperation({ summary: '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –¢–¢–ù' })
  async verifyTTN(
    @Param('id', ParseIntPipe) id: number,
    @Request() req,
  ) {
    return this.ttnService.verifyTTN(id, req.user.id);
  }

  @Post(':id/reject')
  @Roles(...CONTROL_ROLES)
  @ApiOperation({ summary: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å –¢–¢–ù' })
  async rejectTTN(
    @Param('id', ParseIntPipe) id: number,
    @Body('comment') comment: string,
    @Request() req,
  ) {
    return this.ttnService.rejectTTN(id, comment, req.user.id);
  }

  @Post(':id/lab-test')
  @Roles(...CONTROL_ROLES)
  @ApiOperation({ summary: '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è' })
  async requestLabTest(
    @Param('id', ParseIntPipe) id: number,
    @Request() req,
  ) {
    return this.ttnService.requestLabTest(id, req.user.id);
  }

  @Get('my/ttn')
  @Roles(RoleEnum.CONTRACTOR)
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å –º–æ–∏ –¢–¢–ù (–¥–ª—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞)' })
  async getMyTTN(@Request() req) {
    return this.ttnService.findByContractorId(req.user.id);
  }

  @Get('search/by-invoice/:invoiceNumber')
  @ApiOperation({ summary: '–ù–∞–π—Ç–∏ –¢–¢–ù –ø–æ –Ω–æ–º–µ—Ä—É –Ω–∞–∫–ª–∞–¥–Ω–æ–π' })
  async searchByInvoiceNumber(
    @Param('invoiceNumber') invoiceNumber: string,
    @Request() req,
  ) {
    const ttn = await this.ttnService.findByInvoiceNumber(invoiceNumber);
    
    if (!ttn) {
      throw new NotFoundException(`TTN with number ${invoiceNumber} not found`);
    }

    if (req.user.role === RoleEnum.CONTRACTOR && ttn.contractorId !== req.user.id) {
      throw new NotFoundException(`TTN with number ${invoiceNumber} not found`);
    }

    return ttn;
  }
}
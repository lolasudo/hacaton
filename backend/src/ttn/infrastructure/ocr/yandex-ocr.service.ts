// src/ttn/infrastructure/ocr/yandex-ocr.service.ts
import { Injectable, Logger } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { ConfigService } from '@nestjs/config';
import { firstValueFrom } from 'rxjs';
import { TTNRecognitionResult } from '../../domain/ttn-recognition-result';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è Vision OCR
export interface YandexVisionOCRResponse {
  result: {
    textAnnotation: {
      fullText: string;
      blocks?: Array<{
        lines: Array<{
          text: string;
        }>;
      }>;
    };
  };
}

@Injectable()
export class YandexVisionOCRService {
  private readonly logger = new Logger(YandexVisionOCRService.name);
  private readonly visionApiUrl: string;
  private readonly apiKey: string;
  private readonly folderId: string;

  constructor(
    private readonly httpService: HttpService,
    private readonly configService: ConfigService,
  ) {
    this.visionApiUrl = 'https://ocr.api.cloud.yandex.net/ocr/v1/recognizeText';
    
    const apiKey = this.configService.get<string>('YANDEX_API_KEY');
    const folderId = this.configService.get<string>('YANDEX_FOLDER_ID');
    
    if (!apiKey || !folderId) {
      throw new Error('YANDEX_API_KEY and YANDEX_FOLDER_ID must be configured');
    }
    
    this.apiKey = apiKey;
    this.folderId = folderId;
  }

  async recognizeTTN(imageBuffer: Buffer): Promise<TTNRecognitionResult> {
    try {
      console.log('üîç [OCR] Starting TTN recognition...');
      
      const visionResult = await this.sendToVisionAPI(imageBuffer);
      
      // üî¥ –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –†–ê–°–ü–û–ó–ù–ê–ù–ù–û–ì–û –¢–ï–ö–°–¢–ê
      console.log('üîç [OCR] ======= FULL RECOGNIZED TEXT =======');
      console.log(visionResult);
      console.log('üîç [OCR] ======= END TEXT =======');
      
      const parsedData = this.parseTTNText(visionResult);
      
      // üî¥ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ü–ê–†–°–ò–ù–ì–ê
      console.log('üîç [OCR] Parsing results:', {
        invoiceNumber: parsedData.invoiceNumber,
        invoiceDate: parsedData.invoiceDate,
        supplier: parsedData.supplier,
        carrier: parsedData.carrier,
        vehicleNumber: parsedData.vehicleNumber,
        driverName: parsedData.driverName,
        itemsCount: parsedData.items.length,
        items: parsedData.items
      });
      
      this.validateTTNData(parsedData);
      
      console.log('‚úÖ [OCR] TTN recognition completed successfully!');
      return parsedData;
      
    } catch (error) {
      console.error('‚ùå [OCR] TTN recognition failed:', error.message);
      this.logger.error(`OCR recognition failed: ${error.message}`);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¢–¢–ù: ${error.message}`);
    }
  }

  private async sendToVisionAPI(imageBuffer: Buffer): Promise<string> {
    const base64Image = imageBuffer.toString('base64');

    const requestBody = {
      mimeType: 'JPEG',
      model: 'page',
      languageCodes: ['ru', 'en'],
      content: base64Image
    };

    console.log('üîç [OCR] Sending request to Yandex Vision...');
    console.log('üîç [OCR] Image size:', imageBuffer.length, 'bytes');
    console.log('üîç [OCR] Base64 size:', base64Image.length, 'chars');
    console.log('üîç [OCR] Folder ID:', this.folderId);

    try {
      const response = await firstValueFrom(
        this.httpService.post<YandexVisionOCRResponse>(
          this.visionApiUrl,
          requestBody,
          {
            headers: {
              'Authorization': `Api-Key ${this.apiKey}`,
              'Content-Type': 'application/json',
              'x-folder-id': this.folderId
            }
          }
        )
      );

      console.log('‚úÖ [OCR] Vision API request successful!');
      return response.data.result?.textAnnotation?.fullText || '';

    } catch (error: any) {
      console.error('‚ùå [OCR] VISION API ERROR:');
      console.error('‚ùå [OCR] Status code:', error.response?.status);
      console.error('‚ùå [OCR] Status text:', error.response?.statusText);
      
      if (error.response?.data) {
        console.error('‚ùå [OCR] Error details:', JSON.stringify(error.response.data, null, 2));
      }
      
      console.error('‚ùå [OCR] Error message:', error.message);
      
      this.logger.error(`Vision API error: ${error.response?.data || error.message}`);
      throw new Error(`–û—à–∏–±–∫–∞ Vision API: ${error.response?.data?.message || error.message}`);
    }
  }

  private parseTTNText(recognizedText: string): TTNRecognitionResult {
    console.log('üîç [OCR] Parsing recognized text...');
    
    const invoiceNumber = this.extractInvoiceNumber(recognizedText);
    const invoiceDate = this.extractDate(recognizedText);
    const supplier = this.extractSupplier(recognizedText);
    const carrier = this.extractCarrier(recognizedText);
    const vehicleNumber = this.extractVehicleNumber(recognizedText);
    const driverName = this.extractDriverName(recognizedText);
    const items = this.extractMaterials(recognizedText);

    return {
      invoiceNumber,
      invoiceDate, 
      supplier,
      carrier,
      vehicleNumber,
      driverName,
      items,
      rawText: recognizedText,
      confidence: 0.85
    };
  }

  private extractInvoiceNumber(text: string): string {
    console.log('üîç [OCR] Extracting invoice number...');
    
    const patterns = [
      /–¢–¢–ù[:\s]*‚Ññ?[\s]*([A-Z–ê-–Ø0-9-]+)/i,
      /–¢–†–ê–ù–°–ü–û–†–¢–ù–ê–Ø[:\s]*–ù–ê–ö–õ–ê–î–ù–ê–Ø[:\s]*‚Ññ?[\s]*–¢–¢–ù-([A-Z–ê-–Ø0-9-]+)/i,
      /–ù–∞–∫–ª–∞–¥–Ω–∞—è[:\s]*‚Ññ?[\s]*([A-Z–ê-–Ø0-9-]+)/i,
      /–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è[:\s]*–Ω–∞–∫–ª–∞–¥–Ω–∞—è[:\s]*‚Ññ?[\s]*([A-Z–ê-–Ø0-9-]+)/i,
      /–¢–ù[:\s]*‚Ññ?[\s]*([A-Z–ê-–Ø0-9-]+)/i,
      /–°—á—ë—Ç-—Ñ–∞–∫—Ç—É—Ä–∞[:\s]*‚Ññ?[\s]*([A-Z–ê-–Ø0-9-]+)/i,
      /–°–§[:\s]*‚Ññ?[\s]*([A-Z–ê-–Ø0-9-]+)/i,
      /‚Ññ[\s]*([A-Z–ê-–Ø0-9-]{5,})/i,
      /([A-Z–ê-–Ø]{2,3}[-_]\d{2,}[-_]\d{2,})/i,
      /(\d{2,}[-\/]\d{2,}[-\/]\d{2,})/,
    ];
    
    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match) {
        console.log('‚úÖ [OCR] Invoice number found:', match[1], 'with pattern:', pattern);
        return match[1].trim();
      }
    }
    
    console.log('‚ùå [OCR] No invoice number patterns matched');
    return '–ù–ï –†–ê–°–ü–û–ó–ù–ê–ù–û';
  }

  private extractDate(text: string): Date {
    console.log('üîç [OCR] Extracting date...');
    
    const datePatterns = [
      /(\d{2}\.\d{2}\.\d{4})/,
      /(\d{4}-\d{2}-\d{2})/,
      /(\d{1,2}\s+[–∞-—è]+\s+\d{4})/i,
      /–î–∞—Ç–∞[:\s]*(\d{2}\.\d{2}\.\d{4})/i,
      /–æ—Ç[\s]*(\d{2}\.\d{2}\.\d{4})/i
    ];
    
    for (const pattern of datePatterns) {
      const match = text.match(pattern);
      if (match) {
        try {
          const date = new Date(match[1]);
          console.log('‚úÖ [OCR] Date found:', match[1], '->', date);
          return date;
        } catch {
          continue;
        }
      }
    }
    
    console.log('‚ö†Ô∏è [OCR] No date found, using current date');
    return new Date();
  }

  private extractSupplier(text: string): string {
    console.log('üîç [OCR] Extracting supplier...');
    
    const supplierPatterns = [
      /–ü–æ—Å—Ç–∞–≤—â–∏–∫[:\s]*([^\n\r]+)/i,
      /–ì—Ä—É–∑–æ–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å[:\s]*([^\n\r]+)/i,
      /–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å[:\s]*([^\n\r]+)/i,
      /–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è-–ø–æ—Å—Ç–∞–≤—â–∏–∫[:\s]*([^\n\r]+)/i
    ];
    
    for (const pattern of supplierPatterns) {
      const match = text.match(pattern);
      if (match) {
        console.log('‚úÖ [OCR] Supplier found:', match[1]);
        return match[1].trim();
      }
    }
    
    console.log('‚ùå [OCR] No supplier found');
    return '–ù–ï –†–ê–°–ü–û–ó–ù–ê–ù–û';
  }

  private extractCarrier(text: string): string | undefined {
    console.log('üîç [OCR] Extracting carrier...');
    
    const carrierPatterns = [
      /–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫[:\s]*([^\n\r]+)/i,
      /–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑—á–∏–∫[:\s]*([^\n\r]+)/i,
      /–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è[:\s]*–∫–æ–º–ø–∞–Ω–∏—è[:\s]*([^\n\r]+)/i
    ];
    
    for (const pattern of carrierPatterns) {
      const match = text.match(pattern);
      if (match) {
        console.log('‚úÖ [OCR] Carrier found:', match[1]);
        return match[1].trim();
      }
    }
    
    console.log('‚ö†Ô∏è [OCR] No carrier found');
    return undefined;
  }

  private extractVehicleNumber(text: string): string | undefined {
    console.log('üîç [OCR] Extracting vehicle number...');
    
    const vehiclePatterns = [
      /–ì–æ—Å–Ω–æ–º–µ—Ä[:\s]*([A-Z–ê-–Ø0-9-]+)/i,
      /–ê–≤—Ç–æ–º–æ–±–∏–ª—å[:\s]*([A-Z–ê-–Ø0-9-]+)/i,
      /‚Ññ[\s]*–∞–≤—Ç–æ[:\s]*([A-Z–ê-–Ø0-9-]+)/i,
      /–ì–æ—Å[.\s]*–Ω–æ–º–µ—Ä[:\s]*([A-Z–ê-–Ø0-9-]+)/i
    ];
    
    for (const pattern of vehiclePatterns) {
      const match = text.match(pattern);
      if (match) {
        console.log('‚úÖ [OCR] Vehicle number found:', match[1]);
        return match[1].trim();
      }
    }
    
    console.log('‚ö†Ô∏è [OCR] No vehicle number found');
    return undefined;
  }

  private extractDriverName(text: string): string | undefined {
    console.log('üîç [OCR] Extracting driver name...');
    
    const driverPatterns = [
      /–í–æ–¥–∏—Ç–µ–ª—å[:\s]*([^\n\r]+)/i,
      /–§–ò–û[:\s]*–≤–æ–¥–∏—Ç–µ–ª—è[:\s]*([^\n\r]+)/i,
      /–®–æ—Ñ—ë—Ä[:\s]*([^\n\r]+)/i
    ];
    
    for (const pattern of driverPatterns) {
      const match = text.match(pattern);
      if (match) {
        console.log('‚úÖ [OCR] Driver name found:', match[1]);
        return match[1].trim();
      }
    }
    
    console.log('‚ö†Ô∏è [OCR] No driver name found');
    return undefined;
  }

  private extractMaterials(text: string): Array<{
    materialName: string;
    quantity: number;
    unit: string;
    price?: number;
    totalAmount?: number;
  }> {
    console.log('üîç [OCR] Extracting materials...');
    
    const items: Array<{
      materialName: string;
      quantity: number;
      unit: string;
      price?: number;
      totalAmount?: number;
    }> = [];
    
    const lines = text.split('\n');
    let inMaterialsSection = false;
    let currentMaterial: { name?: string; quantity?: number; unit?: string } = {};
    
    console.log('üîç [OCR] Total lines to analyze:', lines.length);
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      
      // üî¥ –ü–û–ò–°–ö –°–ï–ö–¶–ò–ò –ú–ê–¢–ï–†–ò–ê–õ–û–í
      if (line.match(/–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞|–ú–∞—Ç–µ—Ä–∏–∞–ª|–¢–æ–≤–∞—Ä|–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞/i)) {
        inMaterialsSection = true;
        console.log('‚úÖ [OCR] Materials section header found at line', i, ':', line);
        continue;
      }
      
      // üî¥ –í–´–•–û–î –ò–ó –°–ï–ö–¶–ò–ò
      if (inMaterialsSection && line.match(/–ò—Ç–æ–≥–æ|–í—Å–µ–≥–æ|–ò–¢–û–ì–û|–í–°–ï–ì–û/i)) {
        console.log('üîç [OCR] Exiting materials section at line', i, ':', line);
        inMaterialsSection = false;
        
        // üî¥ –°–û–•–†–ê–ù–ò–¢–¨ –ü–û–°–õ–ï–î–ù–ò–ô –ú–ê–¢–ï–†–ò–ê–õ –ü–ï–†–ï–î –í–´–•–û–î–û–ú
        if (currentMaterial.name && currentMaterial.quantity) {
          this.saveMaterial(items, currentMaterial);
          currentMaterial = {};
        }
        continue;
      }
      
      if (inMaterialsSection && line) {
        console.log('üîç [OCR] Processing line', i, ':', line);
        
        // üî¥ –ü–û–ü–´–¢–ö–ê –ù–ê–ô–¢–ò –ü–û–õ–ù–´–ô –ú–ê–¢–ï–†–ò–ê–õ –í –û–î–ù–û–ô –°–¢–†–û–ö–ï
        const fullMaterialPattern = /([–ê-–Ø–∞-—è–Å—ë\s\w.-]{3,})\s+(\d+[,.]?\d*)\s*([–ê-–Ø–∞-—è]{0,5})/;
        const fullMatch = line.match(fullMaterialPattern);
        
        if (fullMatch && fullMatch[1] && fullMatch[2]) {
          const materialName = fullMatch[1].trim();
          const quantity = parseFloat(fullMatch[2].replace(',', '.'));
          
          // üî¥ –ü–†–û–í–ï–†–ö–ê –ß–¢–û –≠–¢–û –ú–ê–¢–ï–†–ò–ê–õ
          if (this.isValidMaterial(materialName, quantity)) {
            const item = {
              materialName: materialName,
              quantity: quantity,
              unit: fullMatch[3] ? fullMatch[3].trim() : '—à—Ç.'
            };
            
            console.log('‚úÖ [OCR] Full material found in one line:', item);
            items.push(item);
            continue;
          }
        }
        
        // üî¥ –ï–°–õ–ò –ù–ï –ù–ê–ô–î–ï–ù –ü–û–õ–ù–´–ô –ú–ê–¢–ï–†–ò–ê–õ, –ü–†–û–í–ï–†–Ø–ï–ú –ß–ê–°–¢–ò
        
        // üî¥ –≠–¢–û –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ù–ê–ó–í–ê–ù–ò–ï –ú–ê–¢–ï–†–ò–ê–õ–ê (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –±–µ–∑ —Ü–∏—Ñ—Ä)
        if (line.match(/^[–ê-–Ø–∞-—è–Å—ë\s.-]+$/) && line.length > 3 && !line.match(/–∏–∑–º|–µ–¥|—à—Ç|—Ç|–∫–≥|–º|–ª/i)) {
          // üî¥ –ï–°–õ–ò –£–ñ–ï –ï–°–¢–¨ –°–û–ë–†–ê–ù–ù–´–ô –ú–ê–¢–ï–†–ò–ê–õ - –°–û–•–†–ê–ù–ò–¢–¨ –ï–ì–û
          if (currentMaterial.name && currentMaterial.quantity) {
            this.saveMaterial(items, currentMaterial);
          }
          
          currentMaterial.name = line;
          console.log('üîç [OCR] Potential material name:', line);
        }
        
        // üî¥ –≠–¢–û –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ö–û–õ–ò–ß–ï–°–¢–í–û (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)
        else if (line.match(/^\d+[,.]?\d*\.?\.?\.?$/)) {
          const cleanLine = line.replace(/\.+$/, ''); // –£–¥–∞–ª–∏—Ç—å –º–Ω–æ–≥–æ—Ç–æ—á–∏—è –≤ –∫–æ–Ω—Ü–µ
          const quantity = parseFloat(cleanLine.replace(',', '.'));
          
          if (quantity > 0) {
            if (currentMaterial.name) {
              currentMaterial.quantity = quantity;
              console.log('üîç [OCR] Potential quantity:', quantity, 'for material:', currentMaterial.name);
            } else {
              // üî¥ –ï–°–õ–ò –ï–°–¢–¨ –ö–û–õ–ò–ß–ï–°–¢–í–û –ë–ï–ó –ù–ê–ó–í–ê–ù–ò–Ø, –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–ï–î–´–î–£–©–£–Æ –°–¢–†–û–ö–£
              if (i > 0) {
                const prevLine = lines[i-1].trim();
                if (prevLine.match(/[–ê-–Ø–∞-—è–Å—ë]/) && !prevLine.match(/\d/)) {
                  currentMaterial.name = prevLine;
                  currentMaterial.quantity = quantity;
                  console.log('üîç [OCR] Using previous line as material name:', prevLine, 'with quantity:', quantity);
                }
              }
            }
          }
        }
        
        // üî¥ –≠–¢–û –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ï–î–ò–ù–ò–¶–ê –ò–ó–ú–ï–†–ï–ù–ò–Ø (–∫–æ—Ä–æ—Ç–∫–æ–µ —Å–ª–æ–≤–æ)
        else if (line.match(/^[–ê-–Ø–∞-—è]{1,5}$/) && line.match(/—Ç|—à—Ç|–∫–≥|–º|–ª|–µ–¥/i)) {
          if (currentMaterial.name && currentMaterial.quantity) {
            currentMaterial.unit = line;
            console.log('üîç [OCR] Potential unit:', line, 'for material:', currentMaterial.name);
          }
        }
        
        // üî¥ –ï–°–õ–ò –£ –ù–ê–° –ï–°–¢–¨ –ü–û–õ–ù–´–ô –ú–ê–¢–ï–†–ò–ê–õ, –°–û–•–†–ê–ù–Ø–ï–ú –ï–ì–û
        if (currentMaterial.name && currentMaterial.quantity) {
          this.saveMaterial(items, currentMaterial);
          currentMaterial = {};
        }
      }
    }
    
    // üî¥ –°–û–•–†–ê–ù–ò–¢–¨ –ü–û–°–õ–ï–î–ù–ò–ô –ú–ê–¢–ï–†–ò–ê–õ –í –ö–û–ù–¶–ï
    if (currentMaterial.name && currentMaterial.quantity) {
      this.saveMaterial(items, currentMaterial);
    }
    
    console.log('üîç [OCR] Total materials found:', items.length);
    return items;
  }

  // üî¥ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –ú–ê–¢–ï–†–ò–ê–õ–ê
  private saveMaterial(
    items: Array<{ materialName: string; quantity: number; unit: string; price?: number; totalAmount?: number }>,
    currentMaterial: { name?: string; quantity?: number; unit?: string }
  ): void {
    if (currentMaterial.name && currentMaterial.quantity && this.isValidMaterial(currentMaterial.name, currentMaterial.quantity)) {
      const item = {
        materialName: currentMaterial.name,
        quantity: currentMaterial.quantity,
        unit: currentMaterial.unit || '—à—Ç.'
      };
      
      console.log('‚úÖ [OCR] Saving material:', item);
      items.push(item);
    }
  }

  // üî¥ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –í–ê–õ–ò–î–ù–û–°–¢–ò –ú–ê–¢–ï–†–ò–ê–õ–ê
  private isValidMaterial(materialName: string, quantity: number): boolean {
    // üî¥ –ò–°–ö–õ–Æ–ß–ê–ï–ú –ó–ê–ì–û–õ–û–í–ö–ò –ò –°–õ–£–ñ–ï–ë–ù–´–ï –°–¢–†–û–ö–ò
    const excludedPatterns = [
      /–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ/i,
      /–ú–∞—Ç–µ—Ä–∏–∞–ª/i,
      /–¢–æ–≤–∞—Ä/i,
      /–ö–æ–ª-–≤–æ/i,
      /–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ/i,
      /–ï–¥\.?–∏–∑–º/i,
      /–¶–µ–Ω–∞/i,
      /–°—É–º–º–∞/i,
      /–∏–∑–º/i,
      /^\.+/,
      /^\.\.\./
    ];
    
    for (const pattern of excludedPatterns) {
      if (materialName.match(pattern)) {
        return false;
      }
    }
    
    return materialName.length >= 2 && quantity > 0;
  }

  private validateTTNData(data: TTNRecognitionResult): void {
    console.log('üîç [OCR] Validating TTN data...');
    
    if (!data.invoiceNumber || data.invoiceNumber === '–ù–ï –†–ê–°–ü–û–ó–ù–ê–ù–û') {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä –¢–¢–ù');
    }
    
    // üî¥ –í–†–ï–ú–ï–ù–ù–û –û–°–õ–ê–ë–õ–Ø–ï–ú –ü–†–û–í–ï–†–ö–£ –ú–ê–¢–ï–†–ò–ê–õ–û–í –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
    if (data.items.length === 0) {
      console.log('‚ö†Ô∏è [OCR] No materials found, but continuing for testing...');
      // throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –¢–¢–ù');
    }
    
    console.log('‚úÖ [OCR] TTN data validation passed');
  }
}